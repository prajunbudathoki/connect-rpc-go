// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package productsrepo

import (
	"context"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name , price , description) VALUES ($1 , $2 , $3) RETURNING id, name, price, description
`

type CreateProductParams struct {
	Name        string
	Price       int64
	Description *string
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRow(ctx, createProduct, arg.Name, arg.Price, arg.Description)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Description,
	)
	return i, err
}

const deleteProductById = `-- name: DeleteProductById :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProductById(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProductById, id)
	return err
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, name, price, description FROM products
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.Query(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, price, description FROM products WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Description,
	)
	return i, err
}

const updateProductByID = `-- name: UpdateProductByID :one

UPDATE products
SET 
    name = COALESCE($2 , name),
    price = COALESCE($3, price),
    description = COALESCE($4 , description)
WHERE id = $1 RETURNING id, name, price, description
`

type UpdateProductByIDParams struct {
	ID          int64
	Name        *string
	Price       *int64
	Description *string
}

func (q *Queries) UpdateProductByID(ctx context.Context, arg UpdateProductByIDParams) (Product, error) {
	row := q.db.QueryRow(ctx, updateProductByID,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.Description,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Description,
	)
	return i, err
}
