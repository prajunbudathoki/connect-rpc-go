// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: products/v1/products.proto

package productsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "myapp/api/products/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProductServiceName is the fully-qualified name of the ProductService service.
	ProductServiceName = "proto.products.v1.ProductService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProductServiceGetAllProductsProcedure is the fully-qualified name of the ProductService's
	// GetAllProducts RPC.
	ProductServiceGetAllProductsProcedure = "/proto.products.v1.ProductService/GetAllProducts"
	// ProductServiceCreateProductProcedure is the fully-qualified name of the ProductService's
	// CreateProduct RPC.
	ProductServiceCreateProductProcedure = "/proto.products.v1.ProductService/CreateProduct"
)

// ProductServiceClient is a client for the proto.products.v1.ProductService service.
type ProductServiceClient interface {
	GetAllProducts(context.Context, *connect.Request[v1.GetAllProductsRequest]) (*connect.Response[v1.GetAllProductsRespone], error)
	CreateProduct(context.Context, *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error)
}

// NewProductServiceClient constructs a client for the proto.products.v1.ProductService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProductServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProductServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	productServiceMethods := v1.File_products_v1_products_proto.Services().ByName("ProductService").Methods()
	return &productServiceClient{
		getAllProducts: connect.NewClient[v1.GetAllProductsRequest, v1.GetAllProductsRespone](
			httpClient,
			baseURL+ProductServiceGetAllProductsProcedure,
			connect.WithSchema(productServiceMethods.ByName("GetAllProducts")),
			connect.WithClientOptions(opts...),
		),
		createProduct: connect.NewClient[v1.CreateProductRequest, v1.CreateProductResponse](
			httpClient,
			baseURL+ProductServiceCreateProductProcedure,
			connect.WithSchema(productServiceMethods.ByName("CreateProduct")),
			connect.WithClientOptions(opts...),
		),
	}
}

// productServiceClient implements ProductServiceClient.
type productServiceClient struct {
	getAllProducts *connect.Client[v1.GetAllProductsRequest, v1.GetAllProductsRespone]
	createProduct  *connect.Client[v1.CreateProductRequest, v1.CreateProductResponse]
}

// GetAllProducts calls proto.products.v1.ProductService.GetAllProducts.
func (c *productServiceClient) GetAllProducts(ctx context.Context, req *connect.Request[v1.GetAllProductsRequest]) (*connect.Response[v1.GetAllProductsRespone], error) {
	return c.getAllProducts.CallUnary(ctx, req)
}

// CreateProduct calls proto.products.v1.ProductService.CreateProduct.
func (c *productServiceClient) CreateProduct(ctx context.Context, req *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error) {
	return c.createProduct.CallUnary(ctx, req)
}

// ProductServiceHandler is an implementation of the proto.products.v1.ProductService service.
type ProductServiceHandler interface {
	GetAllProducts(context.Context, *connect.Request[v1.GetAllProductsRequest]) (*connect.Response[v1.GetAllProductsRespone], error)
	CreateProduct(context.Context, *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error)
}

// NewProductServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProductServiceHandler(svc ProductServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	productServiceMethods := v1.File_products_v1_products_proto.Services().ByName("ProductService").Methods()
	productServiceGetAllProductsHandler := connect.NewUnaryHandler(
		ProductServiceGetAllProductsProcedure,
		svc.GetAllProducts,
		connect.WithSchema(productServiceMethods.ByName("GetAllProducts")),
		connect.WithHandlerOptions(opts...),
	)
	productServiceCreateProductHandler := connect.NewUnaryHandler(
		ProductServiceCreateProductProcedure,
		svc.CreateProduct,
		connect.WithSchema(productServiceMethods.ByName("CreateProduct")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.products.v1.ProductService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProductServiceGetAllProductsProcedure:
			productServiceGetAllProductsHandler.ServeHTTP(w, r)
		case ProductServiceCreateProductProcedure:
			productServiceCreateProductHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProductServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProductServiceHandler struct{}

func (UnimplementedProductServiceHandler) GetAllProducts(context.Context, *connect.Request[v1.GetAllProductsRequest]) (*connect.Response[v1.GetAllProductsRespone], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.products.v1.ProductService.GetAllProducts is not implemented"))
}

func (UnimplementedProductServiceHandler) CreateProduct(context.Context, *connect.Request[v1.CreateProductRequest]) (*connect.Response[v1.CreateProductResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.products.v1.ProductService.CreateProduct is not implemented"))
}
